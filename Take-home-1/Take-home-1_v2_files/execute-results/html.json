{
  "hash": "a791709eb180f03862c2bfa89f51b488",
  "result": {
    "markdown": "---\ntitle: \"Take Home Exercise 1a:Geovisualisation and Analysis\"\ndate: \"27 Novemeber 2023\"\ndate-modified: \"last-modified\"\nauthor: Ke Ke\nformat: html\nexecute:\n  echo: true\n  eval: true\n  warning: false\neditor: visual\n---\n\n\n## 1. Overview\n\nThe urban public transport system generates vast amounts of spatiotemporal trajectory data daily, encompassing bus card swipes and GPS location tracking. When this data is complete and accurate, merging bus card transaction data with GPS positioning easily yields valuable information on passengers' boarding points. This integrated data offers a comprehensive view of transit usage patterns, enhancing our understanding of urban mobility. Analyzing this rich dataset enables the identification of key trends and behaviors in public transportation usage, providing critical insights for city planners and transport authorities to optimize routes, improve service efficiency, and enhance the overall commuter experience.\n\n### 2 Getting Started\n\nBelow libraries will be used:\n\n**sf (Simple Features for R)**: handling spatial data in R. It provides simple, consistent functions for working with spatial vector data (points, lines, polygons).\n\n**sfdep**: provides an interface to \\'spdep\\' to integrate with \\'sf\\' objects and the \\'tidyverse\\'. It will be used for conducting Exploratory Spatial Data Analysis.\n\n**tmap:** provides a set of functions and tools for creating thematic maps such as choropleths \n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, tidyverse, knitr, dplyr)\n```\n:::\n\n\n### **Importing Geospatial data into R**\n\nFirstly, we load in our data:\n\n-   *Bus Stop Location* from LTA DataMall. It provides information about all the bus stops currently being serviced by buses, including the bus stop code (identifier) and location coordinates.\n\nThe code chunk below uses *st_read()* function of **sf** package to import `BusStop` shape file into R as a polygon feature data frame. The imported shape file will be a **simple features** object of **sf**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/kekekay/ISSS624/Take-home-1\"\n```\n:::\n\n```{.r .cell-code}\nbusstop <- st_read(dsn = \"Data/geospatial\",layer = \"BusStop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `BusStop' from data source \n  `C:\\kekekay\\ISSS624\\Take-home-1\\Data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n```\n:::\n\n```{.r .cell-code}\nglimpse(busstop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N <chr> \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N <chr> \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   <chr> \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   <POINT [m]> POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n```\n:::\n:::\n\n\nFrom the result, we can see there are total 5161 multipolygons features with 3 fields in `busstop.`\n\nChecking for missing values in bus stop data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(busstop))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nsapply(busstop, function(x) sum(is.na(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBUS_STOP_N BUS_ROOF_N   LOC_DESC   geometry \n         0          1          8          0 \n```\n:::\n:::\n\n\nThere are total 9 missing value and let's take a further look to decide whether to drop it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtering rows with missing values in BUS_ROOF_N\nmissing_bus_roof_n <- busstop %>% \n                      filter(is.na(BUS_ROOF_N))\n# Viewing the rows with missing BUS_ROOF_N\nhead(missing_bus_roof_n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 1 feature and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 42187.23 ymin: 34995.78 xmax: 42187.23 ymax: 34995.78\nProjected CRS: SVY21\n  BUS_STOP_N BUS_ROOF_N        LOC_DESC                  geometry\n1      96319       <NA> Yusen Logistics POINT (42187.23 34995.78)\n```\n:::\n\n```{.r .cell-code}\n# Filtering rows with missing values in LOC_DESC\nmissing_loc_desc <- busstop %>% \n                    filter(is.na(LOC_DESC))\n# Viewing the rows with missing LOC_DESC\nhead(missing_loc_desc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22616.75 ymin: 28664.55 xmax: 30305.32 ymax: 47793.68\nProjected CRS: SVY21\n  BUS_STOP_N BUS_ROOF_N LOC_DESC                  geometry\n1      47201        UNK     <NA> POINT (22616.75 47793.68)\n2      06029        B06     <NA> POINT (28602.95 29334.55)\n3      03569        B04     <NA> POINT (30277.55 28664.55)\n4      03561        B03     <NA> POINT (30305.32 28673.52)\n5      06011        B01     <NA> POINT (28634.37 29240.45)\n6      05069       B09A     <NA> POINT (28770.39 29184.57)\n```\n:::\n:::\n\n\nSince this analysis is argely geographical (e.g., mapping bus stop locations), missing values in BUS_ROOF_N and LOC_DESC may not significantly impact the results, as the key geometrical data (coordinates of bus stops) is intact.\n\n### **Importing attribute data into R**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus <- read.csv(\"data/aspatial/origin_destination_bus_202310.csv\")\nglimpse(odbus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          <chr> \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            <chr> \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       <int> 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             <chr> \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      <int> 4168, 4168, 80119, 80119, 44069, 20281, 20281, 190…\n$ DESTINATION_PT_CODE <int> 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         <int> 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n```\n:::\n:::\n\n\nChecking for missing values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(odbus))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\nthere is no missing value and proceed to view the rows in *odbus:*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(odbus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  YEAR_MONTH         DAY_TYPE TIME_PER_HOUR PT_TYPE ORIGIN_PT_CODE\n1    2023-10 WEEKENDS/HOLIDAY            16     BUS           4168\n2    2023-10          WEEKDAY            16     BUS           4168\n3    2023-10 WEEKENDS/HOLIDAY            14     BUS          80119\n4    2023-10          WEEKDAY            14     BUS          80119\n5    2023-10          WEEKDAY            17     BUS          44069\n6    2023-10 WEEKENDS/HOLIDAY            17     BUS          20281\n  DESTINATION_PT_CODE TOTAL_TRIPS\n1               10051           3\n2               10051           5\n3               90079           3\n4               90079           5\n5               17229           4\n6               20141           1\n```\n:::\n:::\n\n\nthe **`ORIGIN_PT_CODE`** and **`DESTINATION_PT_CODE`** columns represent categorical data rather than numerical values. In R, factors are used to handle categorical variables which are stored as levels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Convert the 2 columns to factors \nodbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE) \n```\n:::\n\n\n### Filter and aggregate the origin-destination data (`odbus`) for specific time periods\n\nA summarized view of trip data for specific time periods, which can be very useful for understanding travel patterns during peak hours.\n\n| Peak hour period             | Bus tap on time | Data name      |\n|------------------------------|-----------------|----------------|\n| Weekday morning peak         | 6am to 9am      | *origin6_9wdm* |\n| Weekday afternoon peak       | 5pm to 8pm      | *origin5_8wda* |\n| Weekend/holiday morning peak | 11am to 2pm     | *origin11_2hm* |\n| Weekend/holiday evening peak | 4pm to 7pm      | *origin4_7he*  |\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin6_9wdm <- odbus %>%\n  filter(DAY_TYPE == \"WEEKDAY\") %>%\n  filter(TIME_PER_HOUR >= 6 &\n           TIME_PER_HOUR <= 9) %>%\n  group_by(ORIGIN_PT_CODE) %>%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\norigin5_8wda <- odbus %>%\n  filter(DAY_TYPE == \"WEEKDAY\") %>%\n  filter(TIME_PER_HOUR >= 17 &\n           TIME_PER_HOUR <= 20) %>%\n  group_by(ORIGIN_PT_CODE) %>%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\norigin11_2hm <- odbus %>%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %>%\n  filter(TIME_PER_HOUR >= 11 &\n           TIME_PER_HOUR <= 14) %>%\n  group_by(ORIGIN_PT_CODE) %>%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\norigin4_7he <- odbus %>%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %>%\n  filter(TIME_PER_HOUR >= 16 &\n           TIME_PER_HOUR <= 19) %>%\n  group_by(ORIGIN_PT_CODE) %>%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n```\n:::\n\n\n**Presenting Data with `kable`**: using the **`kable`** function to create neatly formatted tables of the first few rows of the datasets.\n\n**Saving Data with `write_rds`**: saving the filtered and summarized datasets to RDS files.\n\n**Reloading Data with `read_rds`**: After saving the datasets, reloading them to ensure that the saved files contain the correct data. This verifies the integrity of the saved files and ensures that they can be reused in following analysis without re-run the entire preprocessing pipeline.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(origin6_9wdm))\n```\n\n::: {.cell-output-display}\n|ORIGIN_PT_CODE | TRIPS|\n|:--------------|-----:|\n|1012           |  1770|\n|1013           |   841|\n|1019           |  1530|\n|1029           |  2483|\n|1039           |  2919|\n|1059           |  1734|\n:::\n\n```{.r .cell-code}\nkable(head(origin5_8wda))\n```\n\n::: {.cell-output-display}\n|ORIGIN_PT_CODE | TRIPS|\n|:--------------|-----:|\n|1012           |  8000|\n|1013           |  7038|\n|1019           |  3398|\n|1029           |  9089|\n|1039           | 12095|\n|1059           |  2212|\n:::\n\n```{.r .cell-code}\nkable(head(origin11_2hm))\n```\n\n::: {.cell-output-display}\n|ORIGIN_PT_CODE | TRIPS|\n|:--------------|-----:|\n|1012           |  2177|\n|1013           |  1818|\n|1019           |  1536|\n|1029           |  3217|\n|1039           |  5408|\n|1059           |  1159|\n:::\n\n```{.r .cell-code}\nkable(head(origin4_7he))\n```\n\n::: {.cell-output-display}\n|ORIGIN_PT_CODE | TRIPS|\n|:--------------|-----:|\n|1012           |  3061|\n|1013           |  2770|\n|1019           |  1685|\n|1029           |  4063|\n|1039           |  7263|\n|1059           |  1118|\n:::\n\n```{.r .cell-code}\nwrite_rds(origin6_9wdm, \"data/rds/origin6_9wdm.rds\")\nwrite_rds(origin5_8wda, \"data/rds/origin5_8wda.rds\")\nwrite_rds(origin11_2hm, \"data/rds/origin11_2hm.rds\")\nwrite_rds(origin4_7he, \"data/rds/origin4_7he.rds\")\n\norigin6_9wdm <- read_rds(\"data/rds/origin6_9wdm.rds\")\norigin5_8wda <- read_rds(\"data/rds/origin5_8wda.rds\")\norigin11_2hm <- read_rds(\"data/rds/origin11_2hm.rds\")\norigin4_7he <- read_rds(\"data/rds/origin4_7he.rds\")\n```\n:::\n\n\n### **Transforming Coordinate System**\n\nRead and spatially transform both bus stop and Master Plan Subzone (MPSZ) datasets to a Singapore-specific coordinate system (CRS 3414)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop <- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `BusStop' from data source \n  `C:\\kekekay\\ISSS624\\Take-home-1\\Data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n```\n:::\n\n```{.r .cell-code}\nglimpse(busstop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N <chr> \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N <chr> \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   <chr> \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   <POINT [m]> POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\kekekay\\ISSS624\\Take-home-1\\Data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 332\nColumns: 7\n$ SUBZONE_N  <chr> \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  <chr> \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N <chr> \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C <chr> \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…\n```\n:::\n:::\n\n\nPerform a spatial intersection to map each bus stop to its corresponding subzone. This process culminates in creating and saving a simplified dataset that links bus stops with subzones, dropping unnecessary geometric data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_mpsz <- st_intersection(busstop, mpsz) %>%\n  select(BUS_STOP_N, SUBZONE_C) %>%\n  st_drop_geometry()\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.csv\")  \nglimpse(busstop_mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,156\nColumns: 2\n$ BUS_STOP_N <chr> \"13099\", \"13089\", \"06151\", \"13211\", \"13139\", \"13109\", \"1311…\n$ SUBZONE_C  <chr> \"RVSZ05\", \"RVSZ05\", \"SRSZ01\", \"SRSZ01\", \"SRSZ01\", \"SRSZ01\",…\n```\n:::\n:::\n\n\n#### Exploratory Data Analysis (EDA) on **`busstop_mpsz`** dataset:\n\n**Count of Bus Stops per Subzone** to reveal which areas are more heavily serviced by buses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_counts <- busstop_mpsz %>% \n                  group_by(SUBZONE_C) %>% \n                  summarise(Count = n())\nhead(busstop_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  SUBZONE_C Count\n  <chr>     <int>\n1 AMSZ01        8\n2 AMSZ02       21\n3 AMSZ03       15\n4 AMSZ04        9\n5 AMSZ05       12\n6 AMSZ06       16\n```\n:::\n:::\n\n\n**Map Visualization**:\n\nSince we have geographic data for subzones, we can create a map showing the distribution of bus stops. This can be particularly insightful for understanding spatial patterns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_counts_map <- mpsz %>% \n                      left_join(busstop_counts, by = \"SUBZONE_C\")\ntm_shape(busstop_counts_map) +\n  tm_borders() +\n  tm_fill(col = \"Count\", title = \"Number of Bus Stops\")\n```\n\n::: {.cell-output-display}\n![](Take-home-1_v2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n### **Geospatial Visualization (Geovisualisation)**\n\n**Hexagon Level Aggregation**:\n\ncreate a hexagonal grid over **`mpsz`** -spatial dataset of Master Plan Subzones, use the **`st_make_grid()`** function from the **`sf`** package to generate a grid of hexagons with specified dimensions, and then create an **`sf`** object from that grid.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_hexagon_grid = st_make_grid(mpsz, c(500, 500), what = \"polygons\", square = FALSE)\n```\n:::\n\n\nadd ID to each hexagon:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_grid_sf = st_sf(area_hexagon_grid) %>%\n  \n  mutate(grid_id = 1:length(lengths(area_hexagon_grid)))\n```\n:::\n\n\nintersect the hexagonal grid with the bus stops, select certain columns, and then drop the geometry for saving to an RDS file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_hexagon <- st_intersection(hexagon_grid_sf,busstop) %>%\n  select(BUS_STOP_N, grid_id) %>%\n  st_drop_geometry()\n\nwrite_rds(busstop_hexagon, \"data/rds/busstop_hexagon.csv\")\n```\n:::\n\n\ncheck for duplicates and only retain the unique values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- busstop_hexagon %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\n\nbusstop_hexagon <- unique(busstop_hexagon)\n```\n:::\n\n\nexclude NA value for each bus stops\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_hexagon <- busstop_hexagon %>%\n  filter(!is.na(grid_id) & grid_id > 0)\n```\n:::\n\n\nAssign ID to each bus stop, exclude all the NULL and 0 values\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the ORIGIN_PT_CODE to a character type before the join\norigin11_2hm$ORIGIN_PT_CODE <- as.character(origin11_2hm$ORIGIN_PT_CODE)\n\norigin4_7he$ORIGIN_PT_CODE <- as.character(origin4_7he$ORIGIN_PT_CODE)\n\norigin5_8wda$ORIGIN_PT_CODE <- as.character(origin5_8wda$ORIGIN_PT_CODE)\n\norigin6_9wdm$ORIGIN_PT_CODE <- as.character(origin6_9wdm$ORIGIN_PT_CODE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngridid11_2 <- left_join(busstop_hexagon, origin11_2hm,\n            by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\")) \n\ngridi11_2 <- gridid11_2 %>%\n  filter(!is.na(TRIPS) & TRIPS > 0)\n\n\ngridid5_8 <- left_join(busstop_hexagon, origin5_8wda,\n            by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\")) \n\ngridid5_8 <- gridid5_8 %>%\n  filter(!is.na(TRIPS) & TRIPS > 0)\n\n\ngridid6_9 <- left_join(busstop_hexagon, origin6_9wdm,\n            by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\")) \n\ngridid6_9 <- gridid6_9 %>%\n  filter(!is.na(TRIPS) & TRIPS > 0)\n\n\ngridid4_7 <- left_join(busstop_hexagon, origin4_7he,\n            by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\")) \n\ngridid4_7 <- gridid4_7 %>%\n  filter(!is.na(TRIPS) & TRIPS > 0)\n```\n:::\n\n\n## **Choropleth Visualisation**\n\n### **6-9am weekday peak hours**\n\naggregate trip data by hexagonal grid IDs to calculate total trips during weekday morning 6-9:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_trips_by_grid <- gridid6_9 %>%\n  group_by(grid_id) %>%\n  summarise(total_trips = sum(TRIPS, na.rm = TRUE))\n```\n:::\n\n\nmerge above with a spatial grid to create a **`sf`** object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_trips_by_grid <- total_trips_by_grid %>%\n  left_join(hexagon_grid_sf, by = c(\"grid_id\" = \"grid_id\"))\n\ntotal_trips_by_grid_sf <- st_sf(total_trips_by_grid)\n```\n:::\n\n\nUsing **`tmap`** to construct a choropleth map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n\nmap_hex = tm_shape(total_trips_by_grid_sf) +\n  tm_fill(\n    col = \"total_trips\",\n    palette = \"Reds\",\n    style = \"cont\",\n    title = \"Total Trips Taken - Weekday Morning Peak 6-9am\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\n      \"Number of trips: \" = \"total_trips\"\n    ),\n    popup.format = list(\n      total_trips = list(format = \"f\", digits = 0)\n    )\n  ) +\n  tm_borders(col = \"grey40\", lwd = 0.4)\n\nmap_hex\n```\n\n::: {.cell-output-display}\n![](Take-home-1_v2_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nThe choropleth map for the **6-9am weekday peak hours** elucidates the distribution of bus ridership across the city's hexagonal sectors. Deep reds indicate bustling hubs, likely business districts or transit interchanges, revealing heavy commuter influx. Lighter shades suggest residential areas with sparser ridership. This visualization is instrumental for urban planners and transit authorities, highlighting critical areas for potential service enhancement and infrastructure development.\n\n### **5pm-8pm Weekday Afternoon Peak Hours**\n\nSame methods to plot for **Weekday Afternoon Peak Hours 5pm-8pm**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_trips_by_grid <- gridid5_8 %>%\n  group_by(grid_id) %>%\n  summarise(total_trips = sum(TRIPS, na.rm = TRUE))\n\ntotal_trips_by_grid <- total_trips_by_grid %>%\n  left_join(hexagon_grid_sf, by = c(\"grid_id\" = \"grid_id\"))\n\ntotal_trips_by_grid_sf <- st_sf(total_trips_by_grid)\n\ntmap_mode(\"plot\")\n\nmap_hex = tm_shape(total_trips_by_grid_sf) +\n  tm_fill(\n    col = \"total_trips\",\n    palette = \"YlGnBu\",\n    style = \"cont\",\n    title = \"Total Trips Taken - Weekday Afternoon Peak 5-8pm\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\n      \"Number of trips: \" = \"total_trips\"\n    ),\n    popup.format = list(\n      total_trips = list(format = \"f\", digits = 0)\n    )\n  ) +\n  tm_borders(col = \"blue4\", lwd = 0.4)\n\nmap_hex\n```\n\n::: {.cell-output-display}\n![](Take-home-1_v2_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nThe **5-8 pm weekday** choropleth map captures the unique dynamics of evening commuting patterns. It vividly displays areas of heightened activity, likely representing major commercial centers and business districts where people depart from at the end of the workday. The varied shades across the hexagonal grid indicate a diverse distribution of bus ridership, with some zones experiencing higher traffic, possibly reflecting major transit routes or nodes. This map helps understand the evening dispersal patterns in urban transit, providing key insights for optimizing bus services during these peak hours. Also in identifying areas that might benefit from increased service frequency or capacity enhancements to accommodate the high volume of commuters heading home.\n\n###  **11am-2pm Weekend/Holiday Morning Peak Hours**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_trips_by_grid <- gridid11_2 %>%\n  group_by(grid_id) %>%\n  summarise(total_trips = sum(TRIPS, na.rm = TRUE))\n\ntotal_trips_by_grid <- total_trips_by_grid %>%\n  left_join(hexagon_grid_sf, by = c(\"grid_id\" = \"grid_id\"))\n\ntotal_trips_by_grid_sf <- st_sf(total_trips_by_grid)\n\ntmap_mode(\"plot\")\n\nmap_hex = tm_shape(total_trips_by_grid_sf) +\n  tm_fill(\n    col = \"total_trips\",\n    palette = \"YlOrRd\",\n    style = \"cont\",\n    title = \"Total Trips Taken - Weekend/Holiday Morning Peak 11am-2pm\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\n      \"Number of trips: \" = \"total_trips\"\n    ),\n    popup.format = list(\n      total_trips = list(format = \"f\", digits = 0)\n    )\n  ) +\n  tm_borders(col = \"blue\", lwd = 0.4)\n\nmap_hex\n```\n\n::: {.cell-output-display}\n![](Take-home-1_v2_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nFor the **Weekend/Holiday Morning Peak between 11am and 2pm**, the map likely illustrates a distinct pattern compared to typical weekday commuting hours. This period often encompasses leisure or shopping activities, and the map could reveal areas of high pedestrian traffic such as malls, parks, or tourist attractions. Denser areas on the map might indicate popular weekend destinations or residential areas from which people commonly venture out during these hours. Such a visualization is particularly valuable for understanding weekend mobility trends, guiding public transport adjustments to cater to non-work-related travel, and enhancing overall service quality during leisure peak times.\n\n###  **4pm-7pm Weekend/Holiday Evening Peak Hours**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_trips_by_grid <- gridid11_2 %>%\n  group_by(grid_id) %>%\n  summarise(total_trips = sum(TRIPS, na.rm = TRUE))\n\ntotal_trips_by_grid <- total_trips_by_grid %>%\n  left_join(hexagon_grid_sf, by = c(\"grid_id\" = \"grid_id\"))\n\ntotal_trips_by_grid_sf <- st_sf(total_trips_by_grid)\n\ntmap_mode(\"plot\")\n\nmap_hex = tm_shape(total_trips_by_grid_sf) +\n  tm_fill(\n    col = \"total_trips\",\n    palette = \"Greens\",\n    style = \"cont\",\n    title = \"Total Trips Taken - Weekend/Holiday Morning Peak 4-7pm\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\n      \"Number of trips: \" = \"total_trips\"\n    ),\n    popup.format = list(\n      total_trips = list(format = \"f\", digits = 0)\n    )\n  ) +\n  tm_borders(col = \"black\", lwd = 0.4)\n\nmap_hex\n```\n\n::: {.cell-output-display}\n![](Take-home-1_v2_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nFor the **Weekend/Holiday Evening Peak Hours from 4pm to 7pm**, the map would likely show the movement patterns as people conclude their leisure activities or return from day trips. Areas with higher activity could include shopping districts, entertainment venues, or parks, reflecting where people spend their weekend afternoons. The map might also highlight transit routes leading back to residential areas, indicating the flow of people heading home. This visualization is invaluable for transit planners to understand and respond to weekend evening travel habits, ensuring efficient and adequate transportation services during these times, and enhancing the overall weekend travel experience.\n",
    "supporting": [
      "Take-home-1_v2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
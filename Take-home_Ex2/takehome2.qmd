---
title: "Take Home Exercise 2"
date: "11 December 2023"
date-modified: "last-modified"
format: html
editor: visual
---

## Getting started

```{r}
pacman::p_load(tidyverse, sf, sp,DT,stplanr,reshape2,ggpubr,
               tmap)
```

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")
```

```{r}
glimpse(odbus)
summary(odbus)
```

## Preparing the Flow Data

### Importing the OD data

```{r}
# check for NA values
sum(is.na(odbus))
sapply(odbus, function(x) sum(is.na(x)))

# convert ORIGIN_PT_CODE and DESTINATION_PT_CODE columns)
odbus$ORIGIN_PT_CODE <-
as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <-
as.factor(odbus$DESTINATION_PT_CODE)

```

### Data Aggregation

```{r}
# Aggregate data for a specific time slot
origin6_9wdm <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

```

```{r}
head(origin6_9wdm)
```

Save output in rds for later use

```{r}
write_rds(origin6_9wdm, "data/rds/origin6_9wdm.rds") 
```

Import rds file in R

```{r}
origin6_9wdm <- read_rds("data/rds/origin6_9wdm.rds") 
```

### **Prepare for Geospatial Analysis**

Map the bus stop codes to their geographical locations (latitude and longitude) by joining data with another dataset that contains these geographical coordinates.

below 2 data will be used:

-   *Bus Stop Location* (Last updated Jul 2023) from [**LTADataMall**](https://datamall.lta.gov.sg/content/datamall/en/static-data.html) (Last updated Jul 2023)

-   *Master Plan 2019 Subzone Boundary (No Sea)* from [Data.gov.sg](https://beta.data.gov.sg/) updated on December 23, 2019

-   *hexagon*, a [hexagon](https://desktop.arcgis.com/en/arcmap/latest/tools/spatial-statistics-toolbox/h-whyhexagons.htm) layer of 375m (this distance is the perpendicular distance between the centre of the hexagon and its edges.)

```{r}

busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)


mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)

```

write mpsz sf tibble data frame into an rds file and import in R enviroment

```{r}
mpsz <- write_rds(mpsz, "data/rds/mpsz.rds")

mpsz <- read_rds("data/rds/mpsz.rds")
```

```{r}
glimpse(busstop)
glimpse(mpsz)
```

### **Join OD Data with Geospatial Data**

associate each bus stop code in your origin-destination (OD) data with its corresponding geographical location from the **`busstop`** dataset.

```{r}
# Join OD data with bus stop geospatial data for both origin and destination
origin6_9wdm_geo <- origin6_9wdm %>%
  left_join(busstop, by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  left_join(busstop, by = c("DESTINATION_PT_CODE" = "BUS_STOP_N"), suffix = c("_origin", "_dest")) 

```

### **Create Analytical Hexagons**

Create a hexagonal grid to represent Traffic Analysis Zones (TAZs) and add ID to each hexagon:

hide code here

```{r}
hexagon_grid = st_make_grid(mpsz, c(700, 700), what = "polygons", square = FALSE)
hexagon_grid_sf = st_sf(hexagon_grid) %>%
  
  mutate(grid_id = 1:length(lengths(hexagon_grid)))

busstop_grid <- st_intersection(hexagon_grid_sf,busstop) %>%
  select(BUS_STOP_N, grid_id) %>%
  st_drop_geometry()

write_rds(busstop_grid, "data/rds/busstop_grid.rds")
write_rds(hexagon_grid_sf, "data/rds/hexagon_grid_sf.rds")

check_duplicate <- busstop_grid %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

busstop_grid <- unique(busstop_grid)

# the check-duplicate should be empty

busstop_grid <- busstop_grid %>%
  filter(!is.na(grid_id) & grid_id > 0)




```

```{r}

origin6_9wdm_geo$ORIGIN_PT_CODE <- as.character(origin6_9wdm_geo$ORIGIN_PT_CODE)
origin6_9wdm_geo$DESTINATION_PT_CODE <- as.character(origin6_9wdm_geo$DESTINATION_PT_CODE)
origin6_9wdm_geo <- origin6_9wdm_geo %>%
  left_join(busstop_grid, by = c("ORIGIN_PT_CODE" = "BUS_STOP_N"))

origin6_9wdm_geo <- origin6_9wdm_geo %>%
  rename(ori_grid = grid_id)

origin6_9wdm_geo <- origin6_9wdm_geo %>%
  left_join(busstop_grid, by = c("DESTINATION_PT_CODE" = "BUS_STOP_N"))

origin6_9wdm_geo <- origin6_9wdm_geo %>%
  rename(desti_grid = grid_id)

origin6_9wdm_geo <- origin6_9wdm_geo %>%
  ungroup() %>%
  select(-c(ORIGIN_PT_CODE, DESTINATION_PT_CODE))
```

```{r}
origin6_9wdm_geo <- na.omit(origin6_9wdm_geo)
```

```{r}
origin6_9wdm_geo <- origin6_9wdm_geo %>%
  select(ori_grid, desti_grid, TRIPS)



```

# **The `set.zoom.limits` argument ensures that the map cannot be zommed out beyond Singapore and also cannot be zoomed in too much such that the map cannot be loaded.**

## **Visualising Spatial Interaction**

prepare a desire line by using **stplanr** package

### **Removing intra-zonal flows**

```{r}
origin6_9wdm_geo1 <- origin6_9wdm_geo[origin6_9wdm_geo$ori_grid != origin6_9wdm_geo$desti_grid, ]
```

### Creating desire lines

```{r}
flowLine <- od2line(flow = origin6_9wdm_geo1, 
                    zones = hexagon_grid_sf,
                    zone_code = "grid_id")
```

### Visualizing the desired lines

```{r}



```

```{r}

```

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
tm_shape() +
  tm_lines(lwd = "TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

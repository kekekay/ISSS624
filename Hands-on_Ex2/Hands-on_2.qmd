---
title: "Hands-on Ex2"
subtitle: "Geospatial - Weight Matrix "
date: "22 Nov 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Getting Started

Ensure that **spdep**, **sf**, **tmap** and **tidyverse** packages of R are currently installed 

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## Bring in geospatial data in R

Geospatial Data - ESRI shapefile

Associated attribute table - csv file

1.  Use **simple feature** of **sf**: *st_read()* for shapefile

```{r}
getwd()
file.exists("data/geospatial")

hunan <- st_read(dsn = "data/geospatial",layer = "Hunan")

```

2.  Import attributes csv. file - output: R dataframe class

```{r}
hunan2012 <- read.csv("data/aspatial/Hunan_2012.csv")

```

3.  Performing relational join

Using *left_join()* of **dplyr** package to update the attribute table of *hunan*'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe

```{r}
hunan <- left_join(hunan,hunan2012)%>% select(1:4,6,15)


```

only select column 1 - 4 and 7,15

(the column 7 is GIC not GDPPC in my table, so i changed to column 6 in code)

## **Visualising Regional Development Indicator**

1.  Prepare a basemap and a choropleth map

    to show distribution of GDPPC 2012 by using *qtm()* of **tmap** package

```{r}
basemap <- tm_shape(hunan) + tm_polygons() + tm_text("NAME_3",size = 0.5)

```

Using **`tmap`** package，to appoint a spatial object (**`hunan`**) by **`tm_shape()`**，then use **`tm_polygons()`** to plot polygons layer，lastly we use **`tm_text()`** to add in text label.

```{r}
gdppc <- qtm(hunan,"GDPPC")
tmap_arrange(basemap,gdppc,asp=1,ncol=2)

```

Use **`qtm()`** function to create a hierarchical color map using the **`GDPPC`** column in the **`hunan`** data frame as a variable.

## **Computing Contiguity Spatial Weights**

use [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute contiguity weight matrices for the study area.

The code chunk below is used to compute Queen contiguity weight matrix.

```{r}
pacman::p_load(spdep)
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.

For each polygon in our polygon object, *wm_q* lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:

```{r}
wm_q[[1]]
```

This shows 1st polygon has 5 neighbours, the number is the IDs as stored in hunan SpatialPolygonsDataFrame class.

We can retrive the county name of Polygon ID=1:

```{r}
hunan$NAME_3[1]
```

To reveal the county names of the five neighboring polygons:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

To retrieve the GDPPC of these five countries:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The printed output above shows that the GDPPC of the five nearest neighbours based on Queen's method are 20981, 34592, 24473, 21311 and 22879 respectively.

```{r}
str(wm_q)
```

This list shows complete weight matrix.

### **Creating (ROOK) contiguity based neighbours**

to compute Rook contiguity weight matrix:

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

The summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours.

### Visualising contiguity weights

```{r}
pacman::p_load(purrr)
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
head(coords)
```

#### Plotting Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "blue")
```

## **Computing distance based neighbours**

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### **Computing fixed distance weight matrix**

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

use *str()* to display the content of wm_d62 weight matrix

```{r}
str(wm_d62)
```

*error here*

#Another way to display the structure of the weight matrix is to combine [*table()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/table) and [*card()*](https://r-spatial.github.io/spdep/reference/card.html) of spdep.

\`\`\`{#{r} #table(hunan\$County, card(wm_d62))

\`\`\`

#### Plotting fixed distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

Alternatively, we can plot both of them next to each other by using the code chunk below.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

### **Computing adaptive distance weight matrix**

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Display

```{r}
str(knn6)
```

#### Plotting distance based neighbours

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## **Weights based on IDW**

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### **Row-standardised weights matrix**

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

To see the weight of the first polygon's eight neighbors type:

```{r}
rswm_q$weights[10]

```

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## **Application of Spatial Weight Matrix**

### **Spatial lag with row-standardized weights**

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

Plot

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### **Spatial lag as a sum of neighboring values**

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

```{r}
hunan <- left_join(hunan, lag.res)
```

plot

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

**Spatial window average**

```{r}
wm_qs <- include.self(wm_q)
```

```{r}
wm_qs[[1]]
```

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

```{r}
hunan %>%
  select("NAME_3", "lag GDPPC", "lag_window_avg GDPPC") %>%
  kable()
```

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### **Spatial window sum**

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

```{r}
hunan %>%
  select("NAME_3", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
